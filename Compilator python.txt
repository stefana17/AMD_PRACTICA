# Definire instructiuni MIPS
mips_instructions = {
    "addi": "001000",
    "or": "000000",
    "and": "000000",
    "add": "000000",
    "sw": "101011",
    "lw": "100011",
    "beq": "000100",
    "slt": "000000",
    "sub": "000000",
    "j": "000010"
}
 
# Convertirea registre MIPS
def convert_register(register):
    if register == "$0":
        return "00000"
    elif register == "$v0":
        return "00010"
    elif register == "$v1":
        return "00011"
    elif register == "$a0":
        return "00100"
    elif register == "$a1":
        return "00101"
    elif register == "$a3":
        return "00111"

# Gasire func code pentru instructiuni R type
def return_func(rfunc):
    if rfunc == "add":
        return "100000"
    elif rfunc == "and":
        return "100100"
    elif rfunc == "or":
        return "100101"
    elif rfunc == "slt":
        return "101010"
    elif rfunc == "sub":
        return "100010"
    
# Convertire instructiune MIPS in cod masina
def convert_instruction(instruction):
    parts = instruction.split(',')
    #print(parts)
    opcode = mips_instructions[parts[0].split(' ')[0]]
    #print(parts)
    if parts[0].split(' ')[0] in ["addi", "beq"]:
        if( parts[0].split(' ')[0] == "beq"):
            return instruction
        rs = convert_register(parts[0].split(' ')[1])
        rt = convert_register(parts[1].strip())
        imm = bin(int(parts[2].strip()))[2:].zfill(16)
        return opcode + rt + rs + imm
    elif parts[0].split(' ')[0] in ["or", "and", "add", "sub", "slt"]:
        rs = convert_register(parts[1])
        rt = convert_register(parts[2])
        rd = convert_register(parts[0].split(' ')[1])
        return opcode + rs + rt + rd + "00000" + return_func(parts[0].split(' ')[0])
    elif parts[0].split(' ')[0] == "sw" or parts[0].split(' ')[0] == "lw":
        base = convert_register(parts[1].split('(')[1].replace(')',''))
        rt = convert_register(parts[0].split(' ')[1])
        offset = bin(int(parts[1].split('(')[0]))
        return opcode + base + rt + offset[2:].zfill(16)
    elif parts[0].split(' ')[0] == "j":
        return instruction
        address = bin(int(parts[1].strip()))[2:].zfill(26)
        return opcode + address
 
# Citire instructiuni din fisier text
def read_instructions_from_file(file_path):
    instructions = []
    with open(file_path, "r") as file:
        for line in file:
            instruction = line.strip()  # elimin spatii suplimentare de pe linie
            if instruction and not instruction.endswith(':'):  # verific daca linia nu este goală sau o etichetă
                instructions.append(instruction)
    return instructions
 
# Parcurgere instructiuni + afișare cod masina
instructions = read_instructions_from_file("instructiuni.txt")
for instruction in instructions:
    machine_code = convert_instruction(instruction)
    print(machine_code)